{"version":3,"sources":["bcblack.mp4","Components/Header/Header.js","Components/About/About.js","Components/Projects/Projects.js","Components/Contact/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","useState","className","Navbar","collapseOnSelect","expand","bg","variant","Brand","to","Toggle","aria-controls","Collapse","id","Nav","Link","About","autoPlay","loop","muted","src","video","type","Projects","Contact","App","exact","from","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,qC,iQCM5B,SAASC,IAAU,IAAD,EACLC,oBAAS,GADJ,6BAG/B,OACE,yBAAKC,UAAU,WAgBb,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACrD,kBAACJ,EAAA,EAAOK,MAAR,KAAc,kBAAC,IAAD,CAASC,GAAG,oBAAZ,cACd,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,CAAKZ,UAAU,YAEf,kBAACY,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,KAAU,kBAAC,IAAD,CAASN,GAAG,oBAAZ,UACV,kBAACK,EAAA,EAAIC,KAAL,KAAU,kBAAC,IAAD,CAASN,GAAG,uBAAZ,aACV,kBAACK,EAAA,EAAIC,KAAL,KAAU,kBAAC,IAAD,CAASN,GAAG,sBAAZ,gB,2BC/BP,SAASO,IACtB,OACE,yBAAKd,UAAU,SACb,2BAAOe,SAAS,WAAWC,KAAK,OAAOC,OAAK,EAACjB,UAAU,qBACrD,4BAAQkB,IAAKC,IAAOC,KAAK,eAE3B,yBAAKpB,UAAU,mBACf,wBAAIA,UAAU,eAAd,sBCTS,SAASqB,IACtB,OACE,uCCFW,SAASC,IACtB,OACE,uCC4BWC,MAvBf,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,aAAalB,GAAG,qBACrC,kBAAC,IAAD,CAAOiB,OAAK,EAACE,KAAK,oBAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOF,OAAK,EAACE,KAAK,uBAChB,kBAACL,EAAD,OAEF,kBAAC,IAAD,CAAOG,OAAK,EAACE,KAAK,sBAChB,kBAACJ,EAAD,OAEF,kBAAC,IAAD,CAAUf,GAAG,mBCbHoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.99950d2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bcblack.bfef1d6d.mp4\";","import React, { useState } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./Header.scss\";\nimport Hamburger from \"hamburger-react\";\nimport { Nav, Navbar, NavDropdown } from \"react-bootstrap\";\n\nexport default function Header() {\n  const [isOpen, setOpen] = useState(false);\n\n  return (\n    <div className=\"nav-bar\">\n      {/* <Nav defaultActiveKey=\"/home\" as=\"ul\" className=\"justify-content-end\">\n        <NavLink to='/portfolio/about'>About</NavLink>\n        <NavLink to='/portfolio/projects'>Projects</NavLink> \n        <NavLink to='/portfolio/contact'>Contact</NavLink>\n        <NavDropdown title=\"Dropdown\" id=\"nav-dropdown\">\n          <NavDropdown.Item eventKey=\"4.1\">Action</NavDropdown.Item>\n          <NavDropdown.Item eventKey=\"4.2\">Another action</NavDropdown.Item>\n          <NavDropdown.Item eventKey=\"4.3\">Something else here</NavDropdown.Item>\n          <NavDropdown.Divider />\n          <NavDropdown.Item eventKey=\"4.4\">Separated link</NavDropdown.Item>\n        </NavDropdown> \n      </Nav>\n      <Hamburger color='#FFF' toggled={isOpen} toggle={setOpen} >\n      </Hamburger> */}\n\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand><NavLink to='/portfolio/about'>Portfolio</NavLink></Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n          </Nav>\n          <Nav>\n            <Nav.Link><NavLink to='/portfolio/about'>About</NavLink></Nav.Link>\n            <Nav.Link><NavLink to='/portfolio/projects'>Projects</NavLink></Nav.Link>\n            <Nav.Link><NavLink to='/portfolio/contact'>Contact</NavLink></Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </div>\n  );\n}\n","import React from 'react'\nimport './About.scss'\nimport video from '../../bcblack.mp4'\n\nexport default function About() {\n  return (\n    <div className=\"about\">\n      <video autoPlay=\"autoplay\" loop=\"loop\" muted className=\"about__background\"> \n        <source src={video} type=\"video/mp4\" />\n      </video>\n      <div className=\"about__overlay\"></div>\n      <h2 className=\"about__name\">Anton Shtipliyski</h2>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Projects() {\n  return (\n    <div>\n      Page 2\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Contact() {\n  return (\n    <div>\n      Page 3\n    </div>\n  )\n}\n","import React from 'react';\nimport './App.scss';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport Header from './Components/Header/Header';\nimport About from './Components/About/About';\nimport Projects from './Components/Projects/Projects';\nimport Contact from './Components/Contact/Contact';\n\n\nfunction App() {\n  return (\n    <div>\n      <Router> \n        <Header />\n        <Switch>\n          <Redirect exact from='/portfolio' to='/portfolio/about' />\n          <Route exact path='/portfolio/about'>\n            <About />\n          </Route>\n          <Route exact path='/portfolio/projects'>\n            <Projects />\n          </Route>\n          <Route exact path='/portfolio/contact'>\n            <Contact />\n          </Route>\n          <Redirect to=\"/portfolio\" />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}